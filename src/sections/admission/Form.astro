---
import Input from "../../components/Input.astro";
import StepCard from "../../components/FormStepsCard.astro";
import Select from "../../components/Select.astro";
import Button from "../../components/Button.astro";
// If you built Select.astro earlier, you can use it. Keeping native <select> here.

const STEP_TITLES = ["About Your Child", "About You", "Boarding Preference"];
const ACCENT = "#C9443A";
---

<section class="bg-n-100 mx-auto w-full space-y-6 p-4 sm:p-6">
  <div class="container mx-auto py-12 md:py-24">
    <!-- Form titles wrapper -->
    <div class="space-y-2 pb-9 font-semibold">
      <h2 class="text-4xl text-orange-500 md:text-6xl">
        Begin Your Child’s Journey Here
      </h2>
      <p class="font-secondary text-n-600 text-base md:text-xl">
        A few details from you, and we’ll be in touch with care, clarity, and
        guidance.
      </p>
    </div>
    <!-- ONE form for all steps -->
    <form id="admission-form" novalidate>
      <!-- STEP 1 -->
      <StepCard
        id="step-1"
        step={1}
        total={3}
        title={STEP_TITLES[0]}
        accent={ACCENT}
      >
        <div
          class="grid grid-cols-1 gap-x-20 gap-y-6 py-8 sm:grid-cols-2 md:gap-y-9"
        >
          <!-- Student Name Input -->
          <div class="flex flex-col gap-2" data-field>
            <Input
              label="Student’s Full Name"
              name="studentName"
              required
              placeholder="Enter Full Name"
            />
            <p class="hidden text-sm text-red-600" data-error>
              Student name is required.
            </p>
          </div>

          <!-- Academic Year Select -->
          <Select
            label="Admission for Academic Year"
            name="academicYear"
            placeholder="Select Year"
            required
            options={[
              { label: "2025–2026", value: "2025-26" },
              { label: "2026–2027", value: "2026-27" },
            ]}
          />

          <!-- DOB Input -->
          <div class="flex flex-col gap-2 sm:col-span-1" data-field>
            <Input
              label="Student’s Date of Birth"
              name="dob"
              type="date"
              required
            />
            <p class="hidden text-sm text-red-600" data-error>
              Date of birth is required.
            </p>
          </div>

          <!-- Class Select -->
          <Select
            label="Admission for Class"
            name="admissionClass"
            required
            placeholder="Select Class"
            options={[
              { label: "XII Hum", value: "12-hum" },
              { label: "XI Sci", value: "11-sci" },
            ]}
          />
        </div>

        <div class="flex flex-col flex-wrap gap-8">
          <p class="text-n-500 text-base font-medium md:text-xl">
            We welcome learners from all backgrounds and cities.
          </p>
          <!-- Button: Continue to next step -->
          <Button
            id="next-1"
            type="button"
            text="Continue to Parent Info"
            variant="solid"
            size="medium"
          />
        </div>
      </StepCard>

      <!-- STEP 2 -->
      <StepCard
        id="step-2"
        step={2}
        total={3}
        title={STEP_TITLES[1]}
        accent={ACCENT}
        hidden
      >
        <div
          class="grid grid-cols-1 gap-x-20 gap-y-6 py-8 sm:grid-cols-2 md:gap-y-9"
        >
          <!-- Parent/Guardian Input -->
          <div class="flex flex-col gap-2" data-field>
            <Input
              label="Parent / Guardian’s Full Name"
              name="parentName"
              required
            />
            <p class="hidden text-sm text-red-600" data-error>
              Parent/Guardian name is required.
            </p>
          </div>

          <!-- Phone Input -->
          <div class="flex flex-col gap-2" data-field>
            <Input label="Phone Number" name="phone" type="tel" required />
            <p class="hidden text-sm text-red-600" data-error>
              Enter a valid 10-digit number.
            </p>
          </div>

          <!-- Email Input -->
          <div class="flex flex-col gap-2 sm:col-span-2" data-field>
            <Input label="Email ID" name="email" type="email" required />
            <p class="hidden text-sm text-red-600" data-error>
              Enter a valid email address.
            </p>
          </div>
        </div>

        <div class="flex flex-col flex-wrap gap-8">
          <p class="text-n-500 text-base font-medium md:text-xl">
            This is how we’ll get in touch with you. We don’t spam, promise.
          </p>
          <div class="flex flex-wrap gap-3">
            <!-- Back button -->
            <Button
              id="back-2"
              type="button"
              text="Back to Child Details"
              variant="ghost"
              size="medium"
              extraClasses="border border-n-300 bg-white text-n-800 hover:bg-n-100"
            />
            <!-- Continue button -->
            <Button
              id="next-2"
              type="button"
              text="Continue to Preferences"
              variant="solid"
              size="medium"
            />
          </div>
        </div>
      </StepCard>

      <!-- STEP 3 -->
      <StepCard
        id="step-3"
        step={3}
        total={3}
        title={STEP_TITLES[2]}
        accent={ACCENT}
        hidden
      >
        <!-- Select component -->
        <div
          class="grid grid-cols-1 gap-x-20 gap-y-6 py-8 sm:grid-cols-2 md:gap-y-9"
        >
          <Select
            label="Hostel Required"
            name="hostel"
            required
            options={[
              { label: "Not Sure Yet", value: "maybe" },
              { label: "Yes", value: "yes" },
              { label: "No", value: "no" },
            ]}
          />
        </div>

        <div class="flex flex-col gap-8">
          <p class="text-n-500 text-base font-medium md:text-xl">
            Let us know if you’d like your child to avail hostel facilities.
            This helps us guide you better.
          </p>
          <div class="flex flex-wrap gap-3">
            <!-- Back button -->
            <Button
              id="back-3"
              type="button"
              text="Back to Parent Info"
              variant="ghost"
              size="medium"
              extraClasses="border border-n-300 bg-n-50 text-n-800 hover:bg-n-100"
            />
            <!-- Submit button -->
            <Button
              id="submit"
              type="submit"
              text="Submit Inquiry"
              variant="solid"
              size="medium"
              extraClasses="bg-[#C9443A]/80 hover:bg-orange-500 text-n-50"
            />
          </div>
        </div>
      </StepCard>
    </form>

    <!-- THANK YOU -->
    <article
      id="thank-you"
      class="border-n-200 bg-n-50 flex flex-col items-center gap-8 rounded-3xl border p-6 text-center md:gap-16"
    >
      <!-- Paper plan icon -->
      <img src="/icons/paper-plane.svg" alt="" class="w-32 md:w-38" />
      <!-- Success panel title -->
      <h3
        class="text-n-700 lg::w-[65%] w-[90%] text-2xl font-medium md:w-[80%] md:text-4xl"
      >
        We’re excited to begin this journey with you — where your child is not
        just admitted, but truly welcomed.
      </h3>
      <!-- Success panel message -->
      <p
        class="text-n-600 font-secondary text-lg font-semibold md:w-[90%] md:text-2xl"
      >
        We’ve received your inquiry and our admissions team will be in touch
        with you shortly.
      </p>
      <!-- Download borchure button -->
      <Button text="Download Brochure" variant="outline" />
    </article>
  </div>
</section>

<script>
  import { admissionEnquiryRequest } from "../../services/api/enquiry.api.service";

  // ELEMENTS
  const form = document.getElementById("admission-form") as HTMLFormElement;
  const stepPanels = [
    document.getElementById("step-1"),
    document.getElementById("step-2"),
    document.getElementById("step-3"),
  ];
  const thankYouSection = document.getElementById("thank-you");

  const nextBtnStep1 = document.getElementById("next-1");
  const nextBtnStep2 = document.getElementById("next-2");
  const backBtnStep2 = document.getElementById("back-2");
  const backBtnStep3 = document.getElementById("back-3");
  const submitBtn = document.getElementById("submit");

  // STATE
  let currentStepIndex = 0;
  let isSubmitting = false;

  // Show one step, hide others
  function showStep(stepIndex: any) {
    stepPanels.forEach((panel, idx) => {
      // Hide non active
      panel?.classList.toggle("hidden", idx !== stepIndex);
    });
    thankYouSection?.classList.add("hidden");
    // Update state
    currentStepIndex = stepIndex;
  }

  function setSubmittingState(isLoading: boolean) {
    if (!submitBtn) return;
    // Prevent multiple submissions
    submitBtn.toggleAttribute("disabled", isLoading);
    submitBtn.setAttribute("aria-busy", String(isLoading));
    submitBtn.classList.toggle("opacity-60", isLoading);
    submitBtn.classList.toggle("cursor-not-allowed", isLoading);
    isSubmitting = isLoading;
  }

  // VALIDATION (current step only)
  const PHONE_REGEX = /^[0-9]{10}$/;

  // Validate field in current step; show error messages
  function validateCurrentStep() {
    const activePanel = stepPanels[currentStepIndex];
    const controls = activePanel?.querySelectorAll("input, select, textarea");
    let allValid = true;

    controls?.forEach((control) => {
      const fieldWrapperEl =
        control.closest("[data-field]") || control.parentElement;
      const errorMessage = fieldWrapperEl?.querySelector?.("[data-error]");

      // Reset previous error state
      if (errorMessage) errorMessage.classList.add("hidden");
      control.classList.remove("!border-red-500");

      // Normalize phone digits before checking
      if (control.name === "phone") {
        control.value = (control.value || "").replace(/\D+/g, "");
      }

      // Check validity
      let isValid = control.checkValidity();
      if (isValid && control.name === "phone") {
        isValid = PHONE_REGEX.test(control.value);
      }

      if (!isValid) {
        allValid = false;
        // Show inline error
        if (errorMessage) errorMessage.classList.remove("hidden");
        control.classList.add("!border-red-500");
      }
    });

    return allValid;
  }

  // Payload
  function buildPayload() {
    // Read all fields
    const formData = new FormData(form);
    const raw = Object.fromEntries(formData.entries());

    return {
      name: (raw.parentName || "").toString().trim(),
      emailId: (raw.email || "").toString().trim(),
      mobileNo: (raw.phone || "").toString().trim(),
      // Format: "2025-26"
      academicyear_name: (raw.academicYear || "").toString().trim(),
      className: (raw.admissionClass || "").toString().trim(),
      // Format: "2010-05-15"
      dob: (raw.dob || "").toString().trim(),
      hostelRequired: (raw.hostel || "").toString().trim(),
    };
  }

  // Function to send inquiry and make API call
  function sendInquiry(payload: any) {
    // Make API Call
    return admissionEnquiryRequest(payload)
      .then((response) => {
        return response;
      })
      .catch((error) => {
        // Surface network/axios errors
        return { success: false, message: error?.message || "Network error" };
      });
  }

  // Submit after validation
  async function submitFormOnce() {
    if (isSubmitting) return;
    // Step 3 validation is the final one before submission
    if (!validateCurrentStep()) return;

    const payload = buildPayload();
    setSubmittingState(true);

    try {
      const response = await sendInquiry(payload);

      if (!response?.success) {
        // Throw to go to the catch block for unified error display
        throw new Error(
          response?.message || "Submission failed. Please try again."
        );
      }

      // Success UI
      stepPanels.forEach((panel) => panel?.classList.add("hidden"));
      thankYouSection?.classList.remove("hidden");
      form.reset();
    } catch (error) {
      console.error("Submit Error:", error);
    } finally {
      setSubmittingState(false);
    }
  }

  // NAV
  nextBtnStep1?.addEventListener("click", () => {
    if (validateCurrentStep()) showStep(1);
  });
  nextBtnStep2?.addEventListener("click", () => {
    if (validateCurrentStep()) showStep(2);
  });
  backBtnStep2?.addEventListener("click", () => showStep(0));
  backBtnStep3?.addEventListener("click", () => showStep(1));

  form.addEventListener("submit", (evt) => {
    evt.preventDefault();
    submitFormOnce();
  });

  // INIT
  showStep(0);
</script>
