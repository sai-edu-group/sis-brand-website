---
import Button from "../../components/Button.astro";
import LearningContent from "../../components/LearningContent.astro";
import SectionHeaderC from "../../components/SectionHeaderC.astro";

// Dummy tab + accordion data
const tabs = [
  {
    title: "Smart Academics",
    items: [
      {
        title: "Smart Classrooms",
        description:
          "Blending innovation with tradition, SAI delivers a future-ready education through digital classrooms.",
        progress: 80,
        isOpen: true,
      },
      {
        title: "Future-Ready Curriculum",
        description:
          "Curriculum designed to equip students with skills for tomorrow.",
        progress: 60,
      },
      {
        title: "Labs & Experiential Learning",
        description:
          "Hands-on labs and real-world experiences for deeper understanding.",
        progress: 70,
      },
      {
        title: "Assessment & Remediation",
        description:
          "Continuous assessment and personalized remediation for every learner.",
        progress: 90,
      },
    ],
  },
  {
    title: "Creative Arts",
    items: [
      {
        title: "Music & Dance",
        description:
          "Encouraging creativity through performing arts and self-expression.",
        progress: 85,
        isOpen: true,
      },
      {
        title: "Visual Arts",
        description:
          "Exploring imagination through painting, sculpture, and crafts.",
        progress: 75,
      },
      {
        title: "Drama & Theatre",
        description:
          "Building confidence and communication through stage performances.",
        progress: 65,
      },
    ],
  },
  {
    title: "Physical Education",
    items: [
      {
        title: "Sports Training",
        description:
          "Structured sports curriculum developing agility and team spirit.",
        progress: 90,
        isOpen: true,
      },
      {
        title: "Yoga & Fitness",
        description: "Balancing physical and mental well-being through yoga.",
        progress: 70,
      },
    ],
  },
];
---

<section>
  <div
    class="container mx-auto flex flex-col gap-10 px-3 py-14 md:gap-11 md:py-20 lg:gap-12 lg:py-24"
  >
    <!-- Header -->
    <SectionHeaderC
      eyebrowText="Learning @ 360"
      title="Education That Shapes Every Side of a Child"
      subtitle="Shaping confident, compassionate, and future-ready learners."
    />

    <!-- Tabs -->
    <div class="flex w-full flex-col items-start gap-3.5 lg:gap-6">
      <div
        id="learning-tabs"
        class="scrollbar-hide flex w-full items-center justify-start gap-3 overflow-x-auto md:gap-5 lg:gap-6"
      >
        {
          tabs.map((tab, idx) => (
            <div
              class={`tab-item flex cursor-pointer flex-col items-center rounded-xl border-2 border-transparent p-3 transition-colors hover:border-orange-500 md:px-3.5 md:py-4 ${
                idx === 0 ? "bg-orange-500" : "bg-white"
              }`}
              data-index={idx}
            >
              <p
                class={`font-secondary text-xs leading-[1.3] whitespace-nowrap md:text-sm lg:text-base ${
                  idx === 0 ? "text-n-50" : "text-n-600"
                }`}
              >
                {tab.title}
              </p>
            </div>
          ))
        }
      </div>

      <!-- Pre-rendered content sections -->
      <div id="learning-sections" class="w-full">
        {
          tabs.map((tab, idx) => (
            <div
              class={`learning-section ${idx === 0 ? "block" : "hidden"}`}
              data-index={idx}
            >
              <LearningContent items={tab.items} title={tab.title} />
            </div>
          ))
        }
      </div>
    </div>
  </div>
</section>

<!-- Modular accordion + tabs with autoplay/progress -->
<script type="module">
  import { initAccordion } from "/js/accordion.js";

  const tabsEl = document.getElementById("learning-tabs");
  const sections = Array.from(document.querySelectorAll(".learning-section"));

  function getAccordionInstance(sec) {
    const root = sec.querySelector("[data-accordion]");
    return root ? root.__acc : null;
  }

  function destroyAccordionsExcept(indexToKeep) {
    sections.forEach((sec, i) => {
      if (i === indexToKeep) return;
      const root = sec.querySelector("[data-accordion]");
      if (root && root.__acc) {
        root.__acc.destroy();
        root.__acc = null;
      }
    });
  }

  function initSectionAccordion(sec) {
    const root = sec.querySelector("[data-accordion]");
    if (!root) return;
    // If already initialized, destroy before re-init to avoid duplicates
    if (root.__acc) {
      root.__acc.destroy();
      root.__acc = null;
    }
    root.__acc = initAccordion(root, {
      autoplay: true,
      cycleMs: 6000,
      progressDurationMs: 6000,
    });
  }

  function activateTab(idx) {
    const tabNodes = Array.from(tabsEl.querySelectorAll(".tab-item"));

    // Reset tabs
    tabNodes.forEach((t) => {
      t.classList.remove("bg-orange-500");
      t.classList.add("bg-white");
      const p = t.querySelector("p");
      p && p.classList.remove("text-n-50");
      p && p.classList.add("text-n-600");
    });

    // Activate current
    const current = tabNodes[idx];
    if (current) {
      current.classList.remove("bg-white");
      current.classList.add("bg-orange-500");
      const p = current.querySelector("p");
      p && p.classList.remove("text-n-600");
      p && p.classList.add("text-n-50");
    }

    // Show correct section
    sections.forEach((sec, i) => {
      if (i === idx) {
        sec.classList.remove("hidden");
        sec.classList.add("block");
      } else {
        sec.classList.add("hidden");
        sec.classList.remove("block");
      }
    });

    // Clean up other sections' accordions first
    destroyAccordionsExcept(idx);

    // (Re)initialize the active section's accordion
    initSectionAccordion(sections[idx]);

    // Optional: restart autoplay explicitly for the active one
    const inst = getAccordionInstance(sections[idx]);
    inst && inst.restartAutoplay && inst.restartAutoplay();
  }

  // Delegate tab clicks
  tabsEl &&
    tabsEl.addEventListener("click", (e) => {
      const item = e.target?.closest?.(".tab-item");
      if (!item) return;
      const idx = Number(item.dataset.index || 0);
      activateTab(idx);
    });

  // Initial
  activateTab(0);
</script>
